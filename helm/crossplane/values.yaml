giantswarm:
  images:
    registry: docker.io
    crossplane:
      image: giantswarm/crossplane
    xfn:
      image: giantswarm/crossplane-xfn
    pullPolicy: IfNotPresent

  kubernetes:
    provider:
      kind: ""

  # Allows VPA to be used if it's installed in the cluster
  verticalPodAutoscaler:
    enabled: true
    # Enables bypassing "autoscaling.k8s.io/v1" check; use with care
    force: false

  crossplane:
    providers:
      config:
        ignoreCrossplaneConstraints: false
        packagePullPolicy: IfNotPresent
        revisionActivationPolicy: Automatic
        revisionHistoryLimit: 0
        skipDependencyResolution: false

      upboundAws:
        version: v0.28.0
        controllerConfig:
          args:
            - --debug
          image: giantswarm/upbound-provider-aws

      contribAws:
        enabled: false
        version: v0.35.0
        controllerConfig:
          args:
            - --debug
          image: giantswarm/crossplane-provider-aws

      upboundAzure:
        version: v0.26.0
        controllerConfig:
          args:
            - --debug
          image: giantswarm/upbound-provider-azure

      upboundGcp:
        version: v0.26.0
        controllerConfig:
          args:
            - --debug
          image: giantswarm/upbound-provider-gcp

  crds:
    install: true
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

replicas: 1

deploymentStrategy: RollingUpdate

nodeSelector: {}
tolerations: []
affinity: {}

# -- Custom labels to add into metadata
customLabels: {}

# -- Custom annotations to add to the Crossplane deployment and pod
customAnnotations: {}

# -- Custom annotations to add to the serviceaccount of Crossplane
serviceAccount:
  customAnnotations: {}

leaderElection: true
args:
  - --debug

provider:
  packages: []

configuration:
  packages: []

imagePullSecrets: {}

registryCaBundleConfig: {}

webhooks:
  enabled: false

rbacManager:
  deploy: true
  skipAggregatedClusterRoles: false
  replicas: 1
  managementPolicy: All
  leaderElection: true
  args: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

priorityClassName: ""

resourcesCrossplane:
  limits:
    cpu: 500m
    memory: 1024Mi
  requests:
    cpu: 250m
    memory: 512Mi

securityContextCrossplane:
  runAsUser: 65532
  runAsGroup: 65532
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

packageCache:
  medium: ""
  sizeLimit: 5Mi
  pvc: ""
  configMap: ""

resourcesRBACManager:
  limits:
    cpu: 500m
    memory: 1024Mi
  requests:
    cpu: 250m
    memory: 512Mi

securityContextRBACManager:
  runAsUser: 65532
  runAsGroup: 65532
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

metrics:
  enabled: false

extraEnvVarsCrossplane: {}

extraEnvVarsRBACManager: {}

podSecurityContextCrossplane: {}

podSecurityContextRBACManager: {}

# The alpha xfn sidecar container that runs Composition Functions. Note you also
# need to run Crossplane with --enable-composition-functions for it to call xfn.
xfn:
  enabled: false
  args: {}
  extraEnvVars: {}
  securityContext:
    runAsUser: 65532
    runAsGroup: 65532
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    # These capabilities allow xfn to create better user namespaces. It drops
    # them after creating a namespace.
    capabilities:
      add: ["SETUID", "SETGID"]
    # xfn needs the unshare syscall, which most RuntimeDefault seccomp profiles
    # do not allow.
    seccompProfile:
      type: Unconfined
  cache:
    medium: ""
    sizeLimit: 1Gi
    pvc: ""
    configMap: ""
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
